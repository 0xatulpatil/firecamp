[
    {
        "target": "c",
        "clients": [
            {
                "libcurl": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://example.com/?id=1asf32&user=dummy\");\n\nCURLcode ret = curl_easy_perform(hnd);"
            }
        ]
    },
    {
        "target": "clojure",
        "clients": [
            {
                "clj_http": "(require '[clj-http.client :as client])\n\n(client/get \"https://example.com/\" {:query-params {:id \"1asf32\"\n                                                   :user \"dummy\"}})"
            }
        ]
    },
    {
        "target": "csharp",
        "clients": [
            {
                "httpclient": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://example.com/?id=1asf32&user=dummy\"),\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
            },
            {
                "restsharp": "var client = new RestClient(\"https://example.com/?id=1asf32&user=dummy\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
            }
        ]
    },
    {
        "target": "go",
        "clients": [
            {
                "native": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example.com/?id=1asf32&user=dummy\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            }
        ]
    },
    {
        "target": "http",
        "clients": [
            {
                "http1.1": "GET /?id=1asf32&user=dummy V2Tls\r\nHost: example.com\r\n\r\n"
            }
        ]
    },
    {
        "target": "java",
        "clients": [
            {
                "asynchttp": "AsyncHttpClient client = new DefaultAsyncHttpClient();\nclient.prepare(\"GET\", \"https://example.com/?id=1asf32&user=dummy\")\n  .execute()\n  .toCompletableFuture()\n  .thenAccept(System.out::println)\n  .join();\n\nclient.close();"
            },
            {
                "nethttp": "HttpRequest request = HttpRequest.newBuilder()\n    .uri(URI.create(\"https://example.com/?id=1asf32&user=dummy\"))\n    .method(\"GET\", HttpRequest.BodyPublishers.noBody())\n    .build();\nHttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());\nSystem.out.println(response.body());"
            },
            {
                "okhttp": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://example.com/?id=1asf32&user=dummy\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
            },
            {
                "unirest": "HttpResponse<String> response = Unirest.get(\"https://example.com/?id=1asf32&user=dummy\")\n  .asString();"
            }
        ]
    },
    {
        "target": "javascript",
        "clients": [
            {
                "xhr": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://example.com/?id=1asf32&user=dummy\");\n\nxhr.send(data);"
            },
            {
                "axios": "import axios from \"axios\";\n\nconst options = {\n  method: 'GET',\n  url: 'https://example.com/',\n  params: {id: '1asf32', user: 'dummy'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});"
            },
            {
                "fetch": "const options = {method: 'GET'};\n\nfetch('https://example.com/?id=1asf32&user=dummy', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));"
            },
            {
                "jquery": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://example.com/?id=1asf32&user=dummy\",\n  \"method\": \"GET\",\n  \"headers\": {}\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
            }
        ]
    },
    {
        "target": "kotlin",
        "clients": [
            {
                "okhttp": "val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url(\"https://example.com/?id=1asf32&user=dummy\")\n  .get()\n  .build()\n\nval response = client.newCall(request).execute()"
            }
        ]
    },
    {
        "target": "node",
        "clients": [
            {
                "native": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"example.com\",\n  \"port\": null,\n  \"path\": \"/?id=1asf32&user=dummy\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
            },
            {
                "request": "const request = require('request');\n\nconst options = {method: 'GET', url: 'https://example.com/', qs: {id: '1asf32', user: 'dummy'}};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
                "unirest": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://example.com/\");\n\nreq.query({\n  \"id\": \"1asf32\",\n  \"user\": \"dummy\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
            },
            {
                "axios": "var axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://example.com/',\n  params: {id: '1asf32', user: 'dummy'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});"
            },
            {
                "fetch": "const fetch = require('node-fetch');\n\nlet url = 'https://example.com/?id=1asf32&user=dummy';\n\nlet options = {method: 'GET'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
            }
        ]
    },
    {
        "target": "objc",
        "clients": [
            {
                "nsurlsession": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://example.com/?id=1asf32&user=dummy\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
            }
        ]
    },
    {
        "target": "ocaml",
        "clients": [
            {
                "cohttp": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://example.com/?id=1asf32&user=dummy\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
            }
        ]
    },
    {
        "target": "php",
        "clients": [
            {
                "curl": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://example.com/?id=1asf32&user=dummy\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
            },
            {
                "guzzle": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://example.com/?id=1asf32&user=dummy\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
            },
            {
                "http1": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://example.com/');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'id' => '1asf32',\n  'user' => 'dummy'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
                "http2": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://example.com/');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'id' => '1asf32',\n  'user' => 'dummy'\n]));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
            }
        ]
    },
    {
        "target": "powershell",
        "clients": [
            {
                "webrequest": "$response = Invoke-WebRequest -Uri 'https://example.com/?id=1asf32&user=dummy' -Method GET "
            },
            {
                "restmethod": "$response = Invoke-RestMethod -Uri 'https://example.com/?id=1asf32&user=dummy' -Method GET "
            }
        ]
    },
    {
        "target": "python",
        "clients": [
            {
                "python3": "import http.client\n\nconn = http.client.HTTPSConnection(\"example.com\")\n\nconn.request(\"GET\", \"/?id=1asf32&user=dummy\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
                "requests": "import requests\n\nurl = \"https://example.com/\"\n\nquerystring = {\"id\":\"1asf32\",\"user\":\"dummy\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
            }
        ]
    },
    {
        "target": "r",
        "clients": [
            {
                "httr": "library(httr)\n\nurl <- \"https://example.com/\"\n\nqueryString <- list(\n  id = \"1asf32\"\n  user = \"dummy\",\n)\n\nresponse <- VERB(\"GET\", url, query = queryString, content_type(\"application/octet-stream\"))\n\ncontent(response, \"text\")"
            }
        ]
    },
    {
        "target": "ruby",
        "clients": [
            {
                "native": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://example.com/?id=1asf32&user=dummy\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
            }
        ]
    },
    {
        "target": "shell",
        "clients": [
            {
                "curl": "curl --request GET \\\n  --url 'https://example.com/?id=1asf32&user=dummy'"
            },
            {
                "httpie": "http GET 'https://example.com/?id=1asf32&user=dummy'"
            },
            {
                "wget": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://example.com/?id=1asf32&user=dummy'"
            }
        ]
    },
    {
        "target": "swift",
        "clients": [
            {
                "nsurlsession": "import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://example.com/?id=1asf32&user=dummy\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
            }
        ]
    }
]